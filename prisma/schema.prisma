// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id       Int    @id @default(autoincrement())
  username String   @unique
  email    String   @unique
  clerkId String @unique
  avatar   String?
  ownedProducts Product[] @relation("ownedProducts") // Unique relation name for owned products
  memberOfProducts Product[] @relation("memberOfProducts") // Unique relation name for products user is a member of
  taskCreated AssignTasks[] @relation("taskCreated")
  membersOftasks AssignTasks[] @relation("AssignedTaskMemebers")
  upvotedProducts Product[] @relation("upvotedProducts")
  reviewed Reviews[]
}

model Product {
  productId          Int      @id @default(autoincrement())
  name               String
  detail             String
  category           String
  startDate          DateTime
  endDate            DateTime
  url                String
  productcolor       String
  productlogo        String
  productdocumentone String?
  productdocumenttwo String?
  visibility         String
  owner              User     @relation("ownedProducts", fields: [ownerId], references: [id])
  ownerId            Int
  members            User[]   @relation("memberOfProducts") // Use unique relation name for members
  skills             String[]
  productCode String
  tasks AssignTasks[] @relation("productTasks")
  Upvote User[] @relation("upvotedProducts")
  reviews Reviews[]

  

}


model Reviews {
  reviewId Int @id @default(autoincrement())
  comment String
  count Int
  productrelated Product @relation(fields: [prodid] , references: [productId])
  prodid Int
  userwhoreviewed User @relation(fields: [userid] , references: [id])
  userid Int
}





model AssignTasks {
  assignId Int @id @default(autoincrement())
  title String
  desc String
  priority String
  status String
  document String
  dueDate DateTime
  createdBy User @relation("taskCreated" , fields: [creatorid] , references: [id])
  creatorid Int
  comment String
   ownedby Product @relation("productTasks",fields: [prodId] , references: [productId])
  prodId Int
  AssignMembers User[] @relation("AssignedTaskMemebers")
  tags String[]
  
  
}