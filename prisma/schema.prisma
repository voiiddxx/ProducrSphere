// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id       Int    @id @default(autoincrement())
  username String   @unique
  email    String   @unique
  clerkId String @unique
  avatar   String?
  ownedProducts Product[] @relation("ownedProducts") // Unique relation name for owned products
  memberOfProducts Product[] @relation("memberOfProducts") // Unique relation name for products user is a member of
  taskCreated Tasks[] @relation("taskCreated")
  taskMembers Tasks[] @relation("taskMembers")
}

model Product {
  productId          Int      @id @default(autoincrement())
  name               String
  detail             String
  category           String
  startDate          DateTime
  endDate            DateTime
  url                String
  productcolor       String
  productlogo        String
  productdocumentone String?
  productdocumenttwo String?
  visibility         String
  owner              User     @relation("ownedProducts", fields: [ownerId], references: [id])
  ownerId            Int
  members            User[]   @relation("memberOfProducts") // Use unique relation name for members
  skills             String[]
  productCode String
  tasks Tasks[] @relation("productTasks")

}



model Tasks {
  taskId Int @id @default(autoincrement())
  ownedby Product @relation("productTasks",fields: [prodId] , references: [productId])
  prodId Int
  title String
  desc String
  prioroty String
  status String
  documents String
  dueDate DateTime
  createdBy User @relation("taskCreated" , fields: [creatorid] , references: [id])
  creatorid Int
  taskmembers User[] @relation("taskMembers")
  tags String[]
  comment String

}

